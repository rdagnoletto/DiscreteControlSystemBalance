/* ==== USER INTERFACE TEMPLATE ==== */
/*  Insert below the code for your scaling, saturation block, and controllers.
For a demo, a simple sine wave is applied to the motor in open loop (Auto/Manual switch should be in Auto)*/

/*  Variables may be declared on the box border, as shown for the input 
 "T" and the output "BallPosn". Variables can also be declared inline as was done for "Temp1". */

float temp1;
float temp2;
float targetAngle;
/*  Shift registers permit previous values of variables to be saved. The output variable "e" is wired to a shift register input on the For Loop border.  The inputs "e1" and "e2"are wired  to the corresponding shift register outputs. "e1" holds the value of "e" from the previous iteration and "e2" holds the value of "e1" from  the previous iteration. */

/* Place your SENSOR SCALING here */
/* NO scaling is provided for this demo */
BallPosn = posV*4.069 + 20.85;  /* V to V, for the demo */
/*ServoAng =  angV/(-1.54)+0.39; */  /* V to V, for the demo */

ServoAng =  angV/(-1.618834) + 0.4336338;

/* SCALING end */

if (L  < 3) /* all shift registers cleared after 3rd iteration */
   {u = e = ThRef = posV= 0;}
else
{
if (Man)    /*manual motor voltage control*/
   {   u = MotV;}
    else     /*control algorithm*/
   { 
/* CAUTION: be sure to NOT load the output of a nonlinear block (e.g., saturator, offset) into a SHIFT REGISTER, to avoid introducing an nonlinearity into your controller. Instead, define separate variables for this purpose.*/
/* Place your outer loop BALL POSITION CONTROLLER below */

/* Place your gear angle SATURATOR below */

/* Place your inner loop GEAR ANGLE CONTROLLER below */
/* For a demo, we wish to apply a sinusoidal voltage to the motor. You could accomplish that with this equation:
u = 0.5*sin(2*3.14*0.5*L*Tms/1000+0.3);
However, this would be computationally intensive. Instead, the values could be pre-calculated and stored into a reference file, accessed through the variable "r". Use Sine.ref file for this purpose. */

targetAngle = r;

if (targetAngle < -0.7)
{ 
targetAngle = -0.7;
}
if (targetAngle > 0.7)
{
targetAngle = 0.7;
}

e = targetAngle - ServoAng ;
temp1 =  -2.55*e +0.9972*e1 + 0.7408*ThRef1;
if (temp1 < -5)
{ 
temp1 = -5;
}
if (temp1 > 5)
{
temp1 = 5;
}
ThRef = temp1;
u = ThRef;
 }
} 

    
/* ThRef, ThRef1, e, e1 are present, but not used in this demo.  However, they will be necessary (at a minimum) when the controllers will be implemented. */